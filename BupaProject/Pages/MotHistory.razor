@page "/"
@using BupaProject.Data
@using BupaProject.Services
@inject VehicleDataCheckService VehicleDataCheckService
@inject NavigationManager NavigationManager

<div class="content-container">
    <div class="input-container">
        <input class="registration-input" @bind="registration" placeholder="Enter Registration" />
        <button class="fetch-button" @onclick="FetchMotHistory">Get MOT History</button>
    </div>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p style="color:red">@errorMessage</p>
    }
    @if (vehicleMotHistory != null)
    {
        <div class="vehicle-info-container">
            <ul class="vehicle-info">
                <li>
                    <strong>Make:</strong> @vehicleMotHistory.Make<br />
                    <strong>Model:</strong> @vehicleMotHistory.Model<br />
                    <strong>Color:</strong> @vehicleMotHistory.PrimaryColour<br />
                    <strong>MOT Expiry Date:</strong> @vehicleMotHistory.MotTests.Max(o=>o.ExpiryDate)<br />
                    <strong>Mileage at last MOT:</strong> @vehicleMotHistory.MotTests.Max(o=>o.OdometerValue)<br />
                </li>
            </ul>
        </div>
    }
</div>

@code {
    private string? registration;
    private VehicleMotHistory? vehicleMotHistory;
    private string? errorMessage;
    private bool shouldRefresh;

    private async Task FetchMotHistory()
    {
        // Clear previous error message
        errorMessage = null;

        // Check if the registration input is empty
        if (string.IsNullOrWhiteSpace(registration))
        {
            errorMessage = "Registration cannot be empty. Please enter a valid registration.";
            return;
        }

        vehicleMotHistory = await VehicleDataCheckService.GetMotTestHistoryAsync(registration);

        if (vehicleMotHistory == null)
        {
            // Check if the registration input is correct
            errorMessage = "Registration not found. Please enter a valid registration.";
            return;
        }
        else
        {
            
            var motTests = vehicleMotHistory.MotTests;            
        }        

        shouldRefresh = true;
        StateHasChanged();
    }    

    protected override void OnAfterRender(bool firstRender)
    {
        if (shouldRefresh)
        {
            shouldRefresh = false;
            StateHasChanged();
        }
    }
}
